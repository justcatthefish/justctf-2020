/* Auto-generated by Tools/scripts/generate_opcode_h.py from Lib/opcode.py */
#ifndef Py_OPCODE_H
#define Py_OPCODE_H
#ifdef __cplusplus
extern "C" {
#endif


    /* Instruction opcodes for compiled code */
#define INPLACE_LSHIFT                 1
#define LOAD_BUILD_CLASS               2
#define STORE_SUBSCR                   3
#define BINARY_MULTIPLY                4
#define GET_AWAITABLE                  5
#define INPLACE_MODULO                 6
#define ROT_TWO                        9
#define BEGIN_FINALLY                  10
#define BINARY_SUBTRACT                11
#define BINARY_POWER                   12
#define IMPORT_STAR                    15
#define BINARY_RSHIFT                  16
#define BINARY_SUBSCR                  17
#define BEFORE_ASYNC_WITH              19
#define INPLACE_AND                    20
#define PRINT_EXPR                     22
#define INPLACE_TRUE_DIVIDE            23
#define SETUP_ANNOTATIONS              24
#define BINARY_LSHIFT                  25
#define UNARY_POSITIVE                 26
#define UNARY_NOT                      27
#define DELETE_SUBSCR                  28
#define BINARY_ADD                     29
#define INPLACE_ADD                    50
#define END_FINALLY                    51
#define NOP                            52
#define INPLACE_RSHIFT                 53
#define DUP_TOP_TWO                    54
#define WITH_CLEANUP_FINISH            55
#define ROT_FOUR                       56
#define INPLACE_OR                     57
#define END_ASYNC_FOR                  59
#define DUP_TOP                        60
#define YIELD_VALUE                    61
#define BINARY_AND                     62
#define INPLACE_XOR                    63
#define POP_TOP                        64
#define INPLACE_SUBTRACT               65
#define WITH_CLEANUP_START             66
#define BINARY_FLOOR_DIVIDE            67
#define BINARY_MODULO                  68
#define POP_EXCEPT                     69
#define BINARY_MATRIX_MULTIPLY         70
#define ROT_THREE                      71
#define GET_ITER                       72
#define INPLACE_POWER                  73
#define BINARY_OR                      75
#define GET_AITER                      76
#define POP_BLOCK                      77
#define UNARY_NEGATIVE                 78
#define INPLACE_MULTIPLY               79
#define UNARY_INVERT                   81
#define GET_ANEXT                      82
#define GET_YIELD_FROM_ITER            83
#define BINARY_TRUE_DIVIDE             84
#define BINARY_XOR                     85
#define INPLACE_FLOOR_DIVIDE           86
#define YIELD_FROM                     87
#define INPLACE_MATRIX_MULTIPLY        88
#define RETURN_VALUE                   89
#define HAVE_ARGUMENT            90
#define LOAD_METHOD                    90
#define BUILD_TUPLE                    91
#define BUILD_MAP_UNPACK_WITH_CALL     92
#define SETUP_FINALLY                  93
#define IMPORT_FROM                    94
#define DELETE_ATTR                    95
#define MAKE_FUNCTION                  96
#define LOAD_CONST                     97
#define FOR_ITER                       98
#define BUILD_STRING                   100
#define BUILD_LIST_UNPACK              101
#define JUMP_FORWARD                   102
#define JUMP_IF_TRUE_OR_POP            103
#define BUILD_SET_UNPACK               104
#define BUILD_CONST_KEY_MAP            105
#define UNPACK_SEQUENCE                106
#define CALL_FUNCTION_KW               107
#define IMPORT_NAME                    108
#define EXTENDED_ARG                   109
#define DELETE_GLOBAL                  110
#define RAISE_VARARGS                  111
#define DELETE_DEREF                   112
#define LOAD_GLOBAL                    113
#define DELETE_FAST                    114
#define COMPARE_OP                     115
#define LIST_APPEND                    116
#define CALL_FUNCTION                  122
#define BUILD_SLICE                    124
#define STORE_NAME                     125
#define STORE_ATTR                     126
#define POP_JUMP_IF_FALSE              130
#define POP_JUMP_IF_TRUE               131
#define LOAD_ATTR                      132
#define BUILD_MAP                      133
#define CALL_METHOD                    135
#define DELETE_NAME                    136
#define STORE_FAST                     137
#define CALL_FUNCTION_EX               138
#define LOAD_FAST                      141
#define STORE_DEREF                    142
#define BUILD_TUPLE_UNPACK_WITH_CALL   143
#define UNPACK_EX                      144
#define SETUP_WITH                     145
#define LOAD_CLASSDEREF                146
#define LOAD_DEREF                     147
#define BUILD_TUPLE_UNPACK             148
#define FORMAT_VALUE                   149
#define JUMP_ABSOLUTE                  150
#define SET_ADD                        151
#define MAP_ADD                        152
#define BUILD_SET                      153
#define BUILD_LIST                     154
#define LOAD_NAME                      155
#define STORE_GLOBAL                   156
#define BUILD_MAP_UNPACK               157
#define JUMP_IF_FALSE_OR_POP           158
#define SETUP_ASYNC_WITH               160
#define LOAD_CLOSURE                   161
#define POP_FINALLY                    162
#define CALL_FINALLY                   163

/* EXCEPT_HANDLER is a special, implicit block type which is created when
   entering an except handler. It is not an opcode but we define it here
   as we want it to be available to both frameobject.c and ceval.c, while
   remaining private.*/
#define EXCEPT_HANDLER 257


enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE,
                PyCmp_GT=Py_GT, PyCmp_GE=Py_GE, PyCmp_IN, PyCmp_NOT_IN,
                PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};

#define HAS_ARG(op) ((op) >= HAVE_ARGUMENT)

#ifdef __cplusplus
}
#endif
#endif /* !Py_OPCODE_H */
