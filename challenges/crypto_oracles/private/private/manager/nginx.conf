user justctf;
worker_processes auto;
pid /run/nginx.pid;
error_log /dev/stdout warn;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    gzip on;
    gunzip on;

    #
    autoindex on;
    server_tokens off;

    log_format  main_log  '$remote_addr [$time_local] $host "$request" '
                               '$status $request_time $body_bytes_sent '
                               '"$http_user_agent" "$http_x_forwarded_for" "$request_uri"';

    access_log /dev/stdout main_log;
    #error_log /dev/stdout debug;

    fastcgi_temp_path /nginx/fastcgi;
    uwsgi_temp_path /nginx/uwsgi;
    scgi_temp_path /nginx/scgi;
    client_body_temp_path /nginx/body;
    proxy_temp_path    /nginx/proxy;

    map $http_host $sandbox_hash {
        default '';
        '~^([a-z0-9]{30})\.' $1;
    }

    server {
        listen 80;

        location / {
            if ($sandbox_hash = '') {
                rewrite .* /internal/manager/ last;
                # rewrite .* /internal/not_exists/ last;
            }
            if (!-f "/tmp/crypto_oracles/$sandbox_hash/server.pid") {
                rewrite .* /internal/expire/ last;
            }
            rewrite .* /internal/nodejs/$uri last;
        }

        #########################
        # manager entrypoint
        location /internal/manager/ {
            internal;
            rewrite .* / break;

            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_pass http://127.0.0.1:8080;
        }

        # nodejs entrypoint
        location /internal/nodejs/ {
            internal;
            rewrite /internal/nodejs/(.*) $1 break;

            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_pass http://unix:/tmp/crypto_oracles/$sandbox_hash/sock.unix;
        }

        # sandbox not exists
        location /internal/expire/ {
            internal;
            add_header Content-Type text/plain always;
            return 404 'sandbox expired or not exists';
        }

        # 404
        location /internal/not_exists/ {
            internal;
            return 404;
        }
    }
}
